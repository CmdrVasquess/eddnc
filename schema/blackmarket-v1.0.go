// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package schema

import "fmt"
import "encoding/json"

type BlackmarketV10JsonHeader struct {
	// Timestamp upon receipt at the gateway. If present, this property will be
	// overwritten by the gateway; submitters are not intended to populate this
	// property.
	GatewayTimestamp *string `json:"gatewayTimestamp,omitempty"`

	// SoftwareName corresponds to the JSON schema field "softwareName".
	SoftwareName string `json:"softwareName"`

	// SoftwareVersion corresponds to the JSON schema field "softwareVersion".
	SoftwareVersion string `json:"softwareVersion"`

	// UploaderID corresponds to the JSON schema field "uploaderID".
	UploaderID string `json:"uploaderID"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlackmarketV10JsonHeader) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["softwareName"]; !ok || v == nil {
		return fmt.Errorf("field softwareName: required")
	}
	if v, ok := raw["softwareVersion"]; !ok || v == nil {
		return fmt.Errorf("field softwareVersion: required")
	}
	if v, ok := raw["uploaderID"]; !ok || v == nil {
		return fmt.Errorf("field uploaderID: required")
	}
	type Plain BlackmarketV10JsonHeader
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlackmarketV10JsonHeader(plain)
	return nil
}

// Contains all properties from the listed events in the client's journal minus
// Localised strings and the properties marked below as 'disallowed'
type BlackmarketV10JsonMessage struct {
	// MarketId corresponds to the JSON schema field "marketId".
	MarketId *int `json:"marketId,omitempty"`

	// Commodity name as returned by the MarketSell entry in the Journal
	Name string `json:"name"`

	// Whether the commodity is prohibited at this station
	Prohibited bool `json:"prohibited"`

	// Price to sell to the market
	SellPrice int `json:"sellPrice"`

	// StationName corresponds to the JSON schema field "stationName".
	StationName string `json:"stationName"`

	// SystemName corresponds to the JSON schema field "systemName".
	SystemName string `json:"systemName"`

	// Timestamp corresponds to the JSON schema field "timestamp".
	Timestamp string `json:"timestamp"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlackmarketV10JsonMessage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	if v, ok := raw["prohibited"]; !ok || v == nil {
		return fmt.Errorf("field prohibited: required")
	}
	if v, ok := raw["sellPrice"]; !ok || v == nil {
		return fmt.Errorf("field sellPrice: required")
	}
	if v, ok := raw["stationName"]; !ok || v == nil {
		return fmt.Errorf("field stationName: required")
	}
	if v, ok := raw["systemName"]; !ok || v == nil {
		return fmt.Errorf("field systemName: required")
	}
	if v, ok := raw["timestamp"]; !ok || v == nil {
		return fmt.Errorf("field timestamp: required")
	}
	type Plain BlackmarketV10JsonMessage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlackmarketV10JsonMessage(plain)
	return nil
}

type BlackmarketV10Json struct {
	// SchemaRef corresponds to the JSON schema field "$schemaRef".
	SchemaRef string `json:"$schemaRef"`

	// Header corresponds to the JSON schema field "header".
	Header BlackmarketV10JsonHeader `json:"header"`

	// Contains all properties from the listed events in the client's journal minus
	// Localised strings and the properties marked below as 'disallowed'
	Message BlackmarketV10JsonMessage `json:"message"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlackmarketV10Json) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["$schemaRef"]; !ok || v == nil {
		return fmt.Errorf("field $schemaRef: required")
	}
	if v, ok := raw["header"]; !ok || v == nil {
		return fmt.Errorf("field header: required")
	}
	if v, ok := raw["message"]; !ok || v == nil {
		return fmt.Errorf("field message: required")
	}
	type Plain BlackmarketV10Json
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlackmarketV10Json(plain)
	return nil
}
